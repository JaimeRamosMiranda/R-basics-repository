#FIRST TRY
# Here is how you compute the sum for the first 20 integers
20*(20+1)/2
[1] 210
 
# However, we can define a variable to use the formula for other values of n
n <- 20
n*(n+1)/2
[1] 210
 
n <- 25
n*(n+1)/2
[1] 325

# Below, write code to calculate the sum of the first 100 integers
n<- 100
n*(n+1)/2
[1] 5050

# Below, write code to calculate the sum of the first 1000 integers
n<-1000
n*(n+1)/2
[1] 500500

#NAMES
# Load package and data
 
library(dslabs)
data(murders)

# Use the function names to extract the variable names
 
library(dslabs)
data(murders)
str(murders)
'data.frame':	51 obs. of  5 variables:
 $ state     : chr  "Alabama" "Alaska" "Arizona" "Arkansas" ...
 $ abb       : chr  "AL" "AK" "AZ" "AR" ...
 $ region    : Factor w/ 4 levels "Northeast","South",..: 2 4 4 2 4 4 1 2 2 2 ...
 $ population: num  4779736 710231 6392017 2915918 37253956 ...
 $ total     : num  135 19 232 93 1257 ...
names(murders)
[1] "state"      "abb"        "region"     "population" "total"

#USING CLASS FUNCTION
# To access the population variable from the murders dataset use this code:
p <- murders$population
 
# To determine the class of object `p` we use this code:
class(p)
[1] "numeric"
 
# Use the accessor to extract state abbreviations and assign it to a
 
# Determine the class of a
 
p<- murders$population
class(p)
[1] "numeric"
names(murders)
[1] "state"      "abb"        "region"     "population" "total"
 
a <- murders$abb
class(a)
[1] "character"

#ACCESS TO A SOME VALUES OF A VARIABLE
# We extract the population like this:
p <- murders$population
 
# This is how we do the same with the square brackets:
o <- murders[["population"]]
 
# We can confirm these two are the same
identical(o, p)
[1] TRUE
 
# Use square brackets to extract `abb` from `murders` and assign it to b
 
# Check if `a` and `b` are identical
 
a <- murders$abb
 
b <- murders[["abb"]]
 
identical(b, a)
[1] TRUE

# We can see the class of the region variable using class
class(murders$region)
[1] "factor"
 
# Determine the number of regions included in this variable
class(murders$region)
[1] "factor"
levels(murders$region)
[1] "Northeast"     "South"         "North Central" "West"
length(levels(murders$region))
[1] 4

#TABLE FUNCTION
# Here is an example of what the table function does
x <- c("a", "a", "b", "b", "b", "c")
table(x)
x
a b c 
2 3 1
 
# Write one line of code to show the number of states per region
table(murders$region)
    Northeast         South North Central          West 
            9          	  17            12          	  13

#VECTORS
# Here is an example creating a numeric vector named cost
cost <- c(50, 75, 90, 100, 150)
 
# Create a numeric vector to store the temperatures listed in the instructions into a vector named temp
# Make sure to follow the same order in the instructions
 
temp <- c(35,88,42,84,81,30)

# here is an example of how to create a character vector
food <- c("pizza", "burgers", "salads", "cheese", "pasta")

# Create a character vector called city to store the city names
# Make sure to follow the same order as in the instructions

city <- c("Beijing","Lagos","Paris","Rio de Janeiro","San Juan","Toronto")
city 
city <- c("Beijing","Lagos","Paris","Rio de Janeiro","San Juan","Toronto")
city
[1] "Beijing"        "Lagos"          "Paris"          "Rio de Janeiro"
[5] "San Juan"       "Toronto"   

# Associate the cost values with its corresponding food item
cost <- c(50, 75, 90, 100, 150)
food <- c("pizza", "burgers", "salads", "cheese", "pasta")
names(cost) <- food
 
# You already wrote this code
temp <- c(35, 88, 42, 84, 81, 30)
city <- c("Beijing", "Lagos", "Paris", "Rio de Janeiro", "San Juan", "Toronto")
 
# Associate the temperature values with its corresponding city
 
temp <- c(35, 88, 42, 84, 81, 30)
city <- c("Beijing", "Lagos", "Paris", "Rio de Janeiro", "San Juan", "Toronto")
names(temp)<-city
temp
       Beijing         Lagos         Paris Rio de Janeiro       San Juan 
            35             88           42             84             81 
       Toronto 
            30 
#SUBSETTING
# cost of the last 3 items in our food list:
cost[3:5]

# temperatures of the first three cities in the list:
temp
temp[1:3]
temp[1:3]
Beijing   Lagos   Paris 
     35      88      42 

# Access the cost of pizza and pasta from our food list 
cost[c(1,5)]

# Define temp
temp <- c(35, 88, 42, 84, 81, 30)
city <- c("Beijing", "Lagos", "Paris", "Rio de Janeiro", "San Juan", "Toronto")
names(temp) <- city

# Access the temperatures of Paris and San Juan
temp[c(3,5)]
temp[c(3,5)]
   Paris San Juan 
      42       81 
